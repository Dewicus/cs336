the component structure of the application. What makes the UI composable and why does this matter?
	The structure is mostly based in the comment box, which contains the comment list, commenter name and comment.


what JSX does. 
	JSX keeps the page from reloading fully every time a new comment is added.

why ReactJS is safe with respect to XSS.
	It does not generate any new html strings.

how the data flows through the components. How are comments loaded? created? saved.
	Comments are loaded through the comment box and the comment list. they are created and saved by sending the user entered data to the server


the nature and purpose of props and state. Which is immutable and which is mutable and why does this distinction matter?
	Props are immutable, this is so no one can go through and change crutial data on the server.

Consider the following, more detailed questions based on statements in the tutorial.

Try editing the comments.json file (to add or remove a legal comment). What happens and why?
	The comment get's erased with no issues.

When the CommentBox has loaded comments from the server (in loadCommentsFromServer()), why doesn’t it call render() to make them visible?
	This would flash the whole page.

Of what advantage, if any, is it to require that components always represent the current state of the view?
	This is advantagous as it will not lead to huge discrepencies in data.

The app implements optimistic updates. Isn’t optimism here more like foolishness? What if the server rejects the new comment (for whatever reason)?
	If the server rejected the comment it would just not be uploaded for others to see.